{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Title","params","className","title","Card","profile","this","props","style","margin","src","avatar_url","alt","width","display","marginLeft","marginBottom","fontSize","name","company","React","Component","CardList","profiles","map","key","Form","handleSubmit","e","a","async","preventDefault","fetch","state","userName","then","res","json","result","data","onSubmit","type","placeholder","value","onChange","event","setState","target","required","AppStart","addNewProfile","profileData","prevState","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oUAUA,SAASA,EAAMC,GACb,OACE,yBAAKC,UAAU,UAAUD,EAAOE,O,IAI9BC,E,iLAEF,IAAMC,EAAUC,KAAKC,MACrB,OACE,6BACE,yBAAKL,UAAU,iBAAiBM,MAAO,CAACC,OAAQ,SAC9C,yBAAKC,IAAKL,EAAQM,WAAYC,IAAI,mBAAWC,MAAM,SACnD,yBAAKX,UAAU,OAAOM,MAAO,CAACM,QAAQ,eAAgBC,WAAY,GAAIC,aAAc,KAClF,yBAAKd,UAAU,OAAOM,MAAO,CAACS,SAAU,SAAUZ,EAAQa,MAC1D,yBAAKhB,UAAU,WAAWG,EAAQc,gB,GAT3BC,IAAMC,WAkBzB,SAASC,EAASf,GAChB,OACE,6BACGA,EAAMgB,SAASC,KAAI,SAAAnB,GAAO,OAAI,kBAAC,EAAD,eAAMoB,IAAKpB,EAAQa,MAAUb,Q,IAK5DqB,E,YAEJ,WAAYnB,GAAO,IAAD,8BAChB,4CAAMA,KAIRoB,aAAe,SAAOC,GAAP,eAAAC,EAAAC,OAAA,uDAEbF,EAAEG,iBAFW,WAAAF,EAAA,MAIIG,MAAM,gCAAD,OAAiC,EAAKC,MAAMC,WAC/DC,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MACG,SAACG,GACC,OAAOA,MARF,OAITC,EAJS,OAYX,EAAKhC,MAAMiC,SAASD,GAZT,sCAHb,EAAKN,MAAQ,CAACC,SAAW,IAFT,E,sEAoBT,IAAD,OACN,OACE,0BAAMM,SAAUlC,KAAKqB,cACnB,2BAAOc,KAAK,OAAOC,YAAY,kBAAkBC,MAAOrC,KAAK2B,MAAMC,SAAUU,SAAU,SAAAC,GAAK,OAAI,EAAKC,SAAS,CAACZ,SAAUW,EAAME,OAAOJ,SAASK,UAAQ,IACvJ,iD,GA1BW5B,IAAMC,WAsCnB4B,E,2MASJhB,MAAQ,CACNV,SAAW,I,EAGb2B,cAAgB,SAACC,GACf,EAAKL,UAAS,SAAAM,GAAS,MAAK,CAC1B7B,SAAQ,sBAAO6B,EAAU7B,UAAjB,CAA0B4B,S,wEAKpC,OACE,6BACE,kBAACnD,EAAD,CAAOG,MAAM,iBACb,kBAAC,EAAD,CAAMqC,SAAUlC,KAAK4C,gBACrB,kBAAC5B,EAAD,CAAUC,SAAUjB,KAAK2B,MAAMV,gB,GAxBhBH,IAAMC,WA8BdgC,EA1Gf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.97273df2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n// import axios from './axios';\n\nfunction App() {\n  return (\n    <AppStart></AppStart>\n  );\n}\n\nfunction Title(params) {\n  return(\n    <div className=\"header\">{params.title}</div>\n  );\n}\n\nclass Card extends React.Component{\n  render(){\n    const profile = this.props;\n    return(\n      <div>\n        <div className=\"github-profile\" style={{margin: '1rem'}}>\n          <img src={profile.avatar_url} alt=\"Açıklama\" width=\"75px\"></img>\n          <div className=\"info\" style={{display:'inline-block', marginLeft: 10, marginBottom: 10}}>\n            <div className=\"name\" style={{fontSize: '125%'}}>{profile.name}</div>\n            <div className=\"company\">{profile.company}</div>\n            {/* <div style={{color: Math.random() < 0.5 ? 'green' : 'red'}}>DENEME DENEME</div> */}\n          </div>\n        </div>\n      </div>\n      );\n  }\n}\n\nfunction CardList(props){\n  return(\n    <div>\n      {props.profiles.map(profile => <Card key={profile.name} {...profile}></Card>)}\n    </div>\n  );\n}\n\nclass Form extends React.Component {\n  \n  constructor(props){\n    super(props);\n    this.state = {userName : ''};\n  }  \n\n  handleSubmit = async (e) => {\n    \n    e.preventDefault();\n\n    var data = await fetch(`https://api.github.com/users/${this.state.userName}`)\n      .then(res=> res.json())\n      .then(\n          (result) => {\n            return result;\n          }\n      );\n\n      this.props.onSubmit(data);\n  };\n\n  render(){\n    return(\n      <form onSubmit={this.handleSubmit}>\n        <input type=\"text\" placeholder=\"GitHub username\" value={this.state.userName} onChange={event => this.setState({userName: event.target.value})} required></input>\n        <button>Add Card</button>\n      </form>\n    );\n  }\n}\n\n// const testData = [\n//   {name: \"Yiğit Özaksüt\", avatar_url: \"https://avatars2.githubusercontent.com/u/11349626?v=4\", company: \"@rise-consulting\"},\n//   {name: \"Derya Dok\", avatar_url: \"https://avatars1.githubusercontent.com/u/26708098?v=4\", company: \"@rise-consulting\"},\n//   {name: \"Emre Can Ergör\", avatar_url: \"https://avatars3.githubusercontent.com/u/30055298?v=4\", company: \"@rise-consulting\"},\n// ];\n\nclass AppStart extends React.Component\n{\n  // constructor(props){\n  //   super(props);\n  //   this.state = {\n  //     profiles : testData,\n  //   };\n  // }\n\n  state = {\n    profiles : [],\n  };\n\n  addNewProfile = (profileData) => {\n    this.setState(prevState => ({\n      profiles : [...prevState.profiles,profileData] \n    }));\n  }\n\n  render(){\n    return(\n      <div>\n        <Title title=\"Profile Card\"></Title>\n        <Form onSubmit={this.addNewProfile}></Form>\n        <CardList profiles={this.state.profiles}></CardList>\n    </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}